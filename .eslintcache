[{"C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\index.js":"1","C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\App.js":"2","C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\reportWebVitals.js":"3","C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\InfoBox.js":"4","C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\Table.js":"5","C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\util.js":"6","C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\LineGraph.js":"7","C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\Map1.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":3746,"mtime":1612375435784,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":371,"mtime":1610286963604,"results":"13","hashOfConfig":"10"},{"size":414,"mtime":1609139227238,"results":"14","hashOfConfig":"10"},{"size":261,"mtime":1609493318469,"results":"15","hashOfConfig":"10"},{"size":2308,"mtime":1610293254673,"results":"16","hashOfConfig":"10"},{"size":1562,"mtime":1609494556184,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1vz9unk",{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\index.js",[],["37","38"],"C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\App.js",["39","40","41"],"import { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport './App.css';\nimport InfoBox from \"./InfoBox\"\nimport Table from \"./Table\";\nimport {useEffect, useState} from \"react\";\nimport \"./Table.css\";\nimport {sortData} from \"./util.js\";\nimport LineGraph from \"./LineGraph\";\nimport Map1 from './Map1.js'\nimport 'leaflet/dist/leaflet.css'\nimport coronavirus from './img/coronavirus.png'\n\n\n\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry]= useState(\"Worldwide\");\n  const [countryInfo, setCountryInfo ] = useState({});\n  const [tableData, settableData ] = useState([]);\n  const [MapCentre, setMapCentre] = useState({lat:0 ,lng:78.9629});\n  const [MapZoom, setMapZoom] = useState(1);\n  const [MapCountries, setMapCountries] = useState([]);\n   \n\n\n  useEffect(() => {\n    const url =\n    country===\"Worldwide\"\n     ? `https://disease.sh/v3/covid-19/all`\n     : `https://disease.sh/v3/covid-19/countries/${country}`;\n\n     fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n      setCountryInfo(data);\n      \n        } \n)} );\n\n\n    \n\n  useEffect(() => {\n      const getCountriesData = async() => {\n        await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            { name : country.country,\n              value : country.countryInfo.iso2}\n              ));\n\n              const SortedData = sortData(data);\n              setMapCountries(data);\n              settableData(SortedData);            \n              setCountries(countries);\n        });\n      };\n      \n      getCountriesData();\n    }, [] );\n\n\n\n    const onCountryChange = async (event) => {\n      const countrycode = event.target.value;\n      setCountry (countrycode);  \n      setMapZoom(4);     \n    }\n    \n\n         \n    \n\n\n  return (\n  \n  <div className=\"container\">\n\n    \n  <img src={coronavirus} className=\"image\" width=\"500\" height=\"500\"/>\n\n  <img src={coronavirus} className=\"image2\" width=\"500\" height=\"500\"/>\n \n  \n  <div className=\"body\"> \n  <h1 className=\"heading\">Covid Tracker</h1>\n  \n\n     <div className=\"app\">\n\n      <div className= \"app__left\">\n        <div className=\"app__header\">\n        <h1 className=\"header\"> Change Country: </h1>\n        <FormControl classname= \"app__dropdown\">\n            <Select \n                variant=\"outlined\"\n                onChange = {onCountryChange}\n                value = {country}>\n              \n                <MenuItem value= \"Worldwide\">Worldwide</MenuItem>\n                {countries.map(country => (<MenuItem value = {country.value} >{country.name}</MenuItem>))}\n\n            </Select>\n        </FormControl>\n        </div>  \n\n\n        <div className= \"app__stats\">\n        \n          <InfoBox title=\"Cases\" total={countryInfo.cases}/>\n          <InfoBox title=\"Recovered\"  total={countryInfo.recovered}/>\n          <InfoBox title=\"Deaths\"  total={countryInfo.deaths}/>\n\n       </div>\n\n        <div className=\"map1\">\n          <Map1 \n            countries = {MapCountries}\n            centre ={MapCentre}\n            zoom = {MapZoom} />\n                          \n        </div>\n    </div>\n\n\n    <div className=\"app__right\">\n\n      <Card variant='outlined' style={{backgroundColor: 'transparent'}} className=\"rightcard\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData} /> \n          <div  className='linegraph'>\n          <h3 className='worldwide'>Worldwide new cases</h3>\n          <LineGraph />\n          </div>\n\n        </CardContent>\n      </Card>\n    \n    </div>\n\n\n\n      \n    </div>\n  </div>\n  </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\reportWebVitals.js",[],"C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\InfoBox.js",[],"C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\Table.js",[],"C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\util.js",[],"C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\LineGraph.js",[],"C:\\Users\\dhruv\\OneDrive\\Desktop\\covid_tracker\\src\\Map1.js",["42","43","44"],"import React from 'react'\r\nimport './Map1.css'\r\nimport { MapContainer, TileLayer, Circle, Popup, Tooltip } from \"react-leaflet\";\r\n\r\n\r\n\r\nconst CasesTypeColors= {\r\n   cases : { hex : \"#CC1034\",\r\n             multiplier: 400, },\r\n\r\n   recovered: { hex : \"#7dd71d\",\r\n                multiplier: 1200, },\r\n\r\n   deaths : { hex : \"#fb4443\",\r\n              multiplier: 2000, }\r\n\r\n};\r\n\r\n\r\nfunction Map1({countries,centre,zoom}) {\r\n    return (\r\n       <div className=\"map\"> \r\n            <MapContainer center={centre} zoom={zoom} >\r\n                  \r\n                 <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                     />\r\n                  \r\n                  {countries.map((country) => {\r\n                  return (\r\n                  <Circle\r\n                  center={[country.countryInfo.lat, country.countryInfo.long]}\r\n                  radius = {Math.sqrt(country['cases'])* CasesTypeColors['cases'].multiplier}\r\n                  fillOpacity={0.2}\r\n                  stroke={false}\r\n                  color = {CasesTypeColors['cases'].hex}\r\n                  >\r\n                     \r\n                     <Tooltip direction=\"right\" offset={[-8, -2]} opacity={1}>\r\n                      <span>{country[\"country\"] + \": \" + \"Active Cases\" + \" \" + country[\"active\"]}</span>\r\n                     </Tooltip> \r\n                     \r\n                  </Circle> ) })}\r\n                                 \r\n                    \r\n            </MapContainer>\r\n       </div> \r\n    )\r\n}\r\n\r\nexport default Map1\r\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":22,"column":21,"nodeType":"51","messageId":"52","endLine":22,"endColumn":33},{"ruleId":"53","severity":1,"message":"54","line":83,"column":3,"nodeType":"55","endLine":83,"endColumn":70},{"ruleId":"53","severity":1,"message":"54","line":85,"column":3,"nodeType":"55","endLine":85,"endColumn":71},{"ruleId":"49","severity":1,"message":"56","line":3,"column":43,"nodeType":"51","messageId":"52","endLine":3,"endColumn":48},{"ruleId":"57","severity":1,"message":"58","line":40,"column":56,"nodeType":"59","messageId":"60","endLine":40,"endColumn":57},{"ruleId":"57","severity":1,"message":"58","line":40,"column":73,"nodeType":"59","messageId":"60","endLine":40,"endColumn":74},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'setMapCentre' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Popup' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]